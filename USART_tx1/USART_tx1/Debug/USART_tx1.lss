
USART_tx1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007be  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
	int nb_elem  = sizeof args / sizeof (char);
	for ( int index = 0 ; index < nb_elem ; index++){
		USART_Transmit(args[index]);
	}

}
  6c:	20 b5       	in	r18, 0x20	; 32
  6e:	2f 77       	andi	r18, 0x7F	; 127
  70:	20 bd       	out	0x20, r18	; 32
  72:	90 bd       	out	0x20, r25	; 32
  74:	89 b9       	out	0x09, r24	; 9
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	86 ea       	ldi	r24, 0xA6	; 166
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <USART_Transmit>:
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_Transmit>
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <USART_Receive>:
/**
Description: method utilisé pour bloquer le thread appelant jusqu'au reception de quelque chose
sur le pin RX
**/
unsigned char USART_Receive(void){
	while(! (UCSRA & (1 << RXC)) );	
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <USART_Receive>
	return UDR;
  8c:	8c b1       	in	r24, 0x0c	; 12
}
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
unsigned int counter=0;
    // initialiser la communication serial
	USART_Init(25);
  90:	89 e1       	ldi	r24, 0x19	; 25
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	unsigned char recieved_char='A';
  98:	11 e4       	ldi	r17, 0x41	; 65
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	d0 e0       	ldi	r29, 0x00	; 0
    while (1) 
    {
		USART_Transmit('H');
  9e:	88 e4       	ldi	r24, 0x48	; 72
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('E');
  a6:	85 e4       	ldi	r24, 0x45	; 69
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  ae:	8c e4       	ldi	r24, 0x4C	; 76
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  b6:	8c e4       	ldi	r24, 0x4C	; 76
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('A');
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit(recieved_char);
  c6:	81 2f       	mov	r24, r17
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\n');
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\r');
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f e9       	ldi	r18, 0x9F	; 159
  e0:	86 e8       	ldi	r24, 0x86	; 134
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x54>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x5e>
  ee:	00 00       	nop
		_delay_ms(500);
		counter+=1;
  f0:	21 96       	adiw	r28, 0x01	; 1
		if(counter>=10){
  f2:	ca 30       	cpi	r28, 0x0A	; 10
  f4:	d1 05       	cpc	r29, r1
  f6:	98 f2       	brcs	.-90     	; 0x9e <main+0xe>
			counter=0;
			recieved_char=USART_Receive();
  f8:	0e 94 44 00 	call	0x88	; 0x88 <USART_Receive>
  fc:	18 2f       	mov	r17, r24
  fe:	cd cf       	rjmp	.-102    	; 0x9a <main+0xa>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
