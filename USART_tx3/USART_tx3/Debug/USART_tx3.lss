
USART_tx3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b2  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000197  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7a:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:
	int nb_elem  = sizeof args / sizeof (char);
	for ( int index = 0 ; index < nb_elem ; index++){
		USART_Transmit(args[index]);
	}

}
  82:	20 b5       	in	r18, 0x20	; 32
  84:	2f 77       	andi	r18, 0x7F	; 127
  86:	20 bd       	out	0x20, r18	; 32
  88:	90 bd       	out	0x20, r25	; 32
  8a:	89 b9       	out	0x09, r24	; 9
  8c:	86 ea       	ldi	r24, 0xA6	; 166
  8e:	80 bd       	out	0x20, r24	; 32
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	8a b9       	out	0x0a, r24	; 10
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	80 68       	ori	r24, 0x80	; 128
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <USART_Transmit>:
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <USART_Transmit>
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	2f e9       	ldi	r18, 0x9F	; 159
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <USART_Transmit+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <USART_Transmit+0x16>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <main>:
  b8:	89 e1       	ldi	r24, 0x19	; 25
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x12>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	88 e4       	ldi	r24, 0x48	; 72
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  d2:	85 e4       	ldi	r24, 0x45	; 69
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  da:	8c e4       	ldi	r24, 0x4C	; 76
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  e2:	8c e4       	ldi	r24, 0x4C	; 76
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  ea:	81 e4       	ldi	r24, 0x41	; 65
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Transmit>
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	ca 30       	cpi	r28, 0x0A	; 10
 110:	d1 05       	cpc	r29, r1
 112:	c8 f6       	brcc	.-78     	; 0xc6 <main+0xe>
 114:	da cf       	rjmp	.-76     	; 0xca <main+0x12>

00000116 <__vector_13>:


/**
Interruption lors de la reception d'un caractère a été receptionée par l'interface serial 
**/
ISR(USART_RXC_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
    // Cette ISR est appelée lorsqu'un octet est reçu
    recieved_char = UDR;
 122:	8c b1       	in	r24, 0x0c	; 12
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    // Traitez l'octet reçu (stockez-le, envoyez-le sur une interface de communication, etc.)
	
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
