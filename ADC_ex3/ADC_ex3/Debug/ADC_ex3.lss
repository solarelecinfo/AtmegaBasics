
ADC_ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ac  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  00001257  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cf  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000110  00000000  00000000  00001a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 82 00 	call	0x104	; 0x104 <main>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <adcInit>:
/**********************************************************************************
Description:Initialize ADC interface on single conversion mode(Single Analog Input)
************************************************************************************/
void adcInit()
{
	ADMUX &= ~(1<<ADLAR);//set analog conversion to be right adjusted meaning LSB is at right of the result register
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	8f 7d       	andi	r24, 0xDF	; 223
  80:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<REFS0);//To specify analog reference voltage as AVCC- typically connected to VCC
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
    ADMUX |= 0x01;//Set analog input(ADC1) with no Gain 
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADPS1)|(1<<ADPS0); //Divide reference 1MHZ frequency by prescalar to set ADC frequency 1MHz/8= 125kHz note: ADC range must be [ 50kHz to 200kHz]
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	83 60       	ori	r24, 0x03	; 3
  92:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);//Enable ADC interface.
  94:	86 b1       	in	r24, 0x06	; 6
  96:	80 68       	ori	r24, 0x80	; 128
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <readPinAnalog>:

/************************************************************************
Description:Execute punctual conversion on analog input voltage 
************************************************************************/
void readPinAnalog(){
	ADCSRA |= ( 1 << ADSC );//Start conversion explicitly
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6
	while ( ADCSRA & (1 << ADSC) ){} //Wait for conversion to finish
  a2:	36 99       	sbic	0x06, 6	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <readPinAnalog+0x6>
	
	uint8_t lowAdcValue = ADCL; //Read ADC result register(LSB) right adjusted
  a6:	24 b1       	in	r18, 0x04	; 4
	uint16_t tenBitsResult = ADCH<<8 | lowAdcValue; //Read remaining part(MSB) of ADC result register
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	98 2f       	mov	r25, r24
  ae:	88 27       	eor	r24, r24
  b0:	82 2b       	or	r24, r18
	adcValue = tenBitsResult; //Result ADC 10 bits ADCH(2)-ADCL(8)
  b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	08 95       	ret

000000bc <usartInit>:
/************************************************************************
Description: Initialize USART asynchronous interface at 2400bauds=25                                                                    */
/************************************************************************/
void usartInit (unsigned int baud)
{
	UBRRH &= ~(1 << URSEL);//Enable UBBRH write mode
  bc:	20 b5       	in	r18, 0x20	; 32
  be:	2f 77       	andi	r18, 0x7F	; 127
  c0:	20 bd       	out	0x20, r18	; 32
	UBRRH = (unsigned char) (baud >> 8);//Write baud speed on UBRR register MSB(bits 8 to 11)
  c2:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baud;//Write baud speed on UBRR register LSB(bits 0 to 7).
  c4:	89 b9       	out	0x09, r24	; 9
	UCSRC = (1<<URSEL)| (1<<UPM1)|(3 << UCSZ0);//set parity=EVEN, stop_bit=1,data_length=8bits.
  c6:	86 ea       	ldi	r24, 0xA6	; 166
  c8:	80 bd       	out	0x20, r24	; 32
	UCSRB =  (1 << TXEN);	//Enable the receiver and transmitter.
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	08 95       	ret

000000d0 <usartTransmit>:
/************************************************************************
Description: Send data via USART asynchronous interface
************************************************************************/
void usartTransmit (uint8_t data)
{
	while (! (UCSRA & (1 << UDRE)) ){};	//Wait until the Transmitter is ready
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <usartTransmit>
	UDR = data;	//Transmit data out 
  d4:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e9       	ldi	r18, 0x9F	; 159
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <usartTransmit+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <usartTransmit+0x16>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <usartTransmitString>:

/****************************************************************************************
Description:To send a String of characters via USART interface one character at a time.
****************************************************************************************/
void usartTransmitString(char *args)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	while (*args) {
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <usartTransmitString+0xe>
		usartTransmit(*args++);
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
/****************************************************************************************
Description:To send a String of characters via USART interface one character at a time.
****************************************************************************************/
void usartTransmitString(char *args)
{
	while (*args) {
  f8:	88 81       	ld	r24, Y
  fa:	81 11       	cpse	r24, r1
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <usartTransmitString+0x8>
		usartTransmit(*args++);
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:
void readPinAnalog(void);

int main(void)
{
	//Initialize interfaces one time
	usartInit(25);
 104:	89 e1       	ldi	r24, 0x19	; 25
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 5e 00 	call	0xbc	; 0xbc <usartInit>
	adcInit();	
 10c:	0e 94 3e 00 	call	0x7c	; 0x7c <adcInit>
	//Process read on Analog input pin
	while (1)
	{
		usartTransmit('V');
 110:	86 e5       	ldi	r24, 0x56	; 86
 112:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		usartTransmit('A');
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		usartTransmit('L');
 11c:	8c e4       	ldi	r24, 0x4C	; 76
 11e:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		usartTransmit(':');
 122:	8a e3       	ldi	r24, 0x3A	; 58
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		itoa (adcValue,buffer,10);
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 130:	4a e0       	ldi	r20, 0x0A	; 10
 132:	62 e6       	ldi	r22, 0x62	; 98
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 aa 00 	call	0x154	; 0x154 <__itoa_ncheck>
		usartTransmitString(buffer);
 13a:	82 e6       	ldi	r24, 0x62	; 98
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 75 00 	call	0xea	; 0xea <usartTransmitString>
		usartTransmit('\n');
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		usartTransmit('\r');
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <usartTransmit>
		readPinAnalog();	
 14e:	0e 94 4e 00 	call	0x9c	; 0x9c <readPinAnalog>
 152:	de cf       	rjmp	.-68     	; 0x110 <main+0xc>

00000154 <__itoa_ncheck>:
 154:	bb 27       	eor	r27, r27
 156:	4a 30       	cpi	r20, 0x0A	; 10
 158:	31 f4       	brne	.+12     	; 0x166 <__itoa_ncheck+0x12>
 15a:	99 23       	and	r25, r25
 15c:	22 f4       	brpl	.+8      	; 0x166 <__itoa_ncheck+0x12>
 15e:	bd e2       	ldi	r27, 0x2D	; 45
 160:	90 95       	com	r25
 162:	81 95       	neg	r24
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__utoa_common>

0000016a <__utoa_ncheck>:
 16a:	bb 27       	eor	r27, r27

0000016c <__utoa_common>:
 16c:	fb 01       	movw	r30, r22
 16e:	55 27       	eor	r21, r21
 170:	aa 27       	eor	r26, r26
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	aa 1f       	adc	r26, r26
 178:	a4 17       	cp	r26, r20
 17a:	10 f0       	brcs	.+4      	; 0x180 <__utoa_common+0x14>
 17c:	a4 1b       	sub	r26, r20
 17e:	83 95       	inc	r24
 180:	50 51       	subi	r21, 0x10	; 16
 182:	b9 f7       	brne	.-18     	; 0x172 <__utoa_common+0x6>
 184:	a0 5d       	subi	r26, 0xD0	; 208
 186:	aa 33       	cpi	r26, 0x3A	; 58
 188:	08 f0       	brcs	.+2      	; 0x18c <__utoa_common+0x20>
 18a:	a9 5d       	subi	r26, 0xD9	; 217
 18c:	a1 93       	st	Z+, r26
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	79 f7       	brne	.-34     	; 0x170 <__utoa_common+0x4>
 192:	b1 11       	cpse	r27, r1
 194:	b1 93       	st	Z+, r27
 196:	11 92       	st	Z+, r1
 198:	cb 01       	movw	r24, r22
 19a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <strrev>

0000019e <strrev>:
 19e:	dc 01       	movw	r26, r24
 1a0:	fc 01       	movw	r30, r24
 1a2:	67 2f       	mov	r22, r23
 1a4:	71 91       	ld	r23, Z+
 1a6:	77 23       	and	r23, r23
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <strrev+0x4>
 1aa:	32 97       	sbiw	r30, 0x02	; 2
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <strrev+0x18>
 1ae:	7c 91       	ld	r23, X
 1b0:	6d 93       	st	X+, r22
 1b2:	70 83       	st	Z, r23
 1b4:	62 91       	ld	r22, -Z
 1b6:	ae 17       	cp	r26, r30
 1b8:	bf 07       	cpc	r27, r31
 1ba:	c8 f3       	brcs	.-14     	; 0x1ae <strrev+0x10>
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
