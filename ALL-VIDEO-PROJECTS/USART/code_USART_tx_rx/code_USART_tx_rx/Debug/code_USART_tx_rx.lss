
code_USART_tx_rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f7  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000099  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
Description:Initialize configuration register for USART interface in asynchronous mode
baud:Integer value for speed baud(bits/s) in UBBR ,example: 2400bauds=25
/*************************************************************************************/
void USART_Init (unsigned int baud)
{
	UCSRB = (1 << TXEN) | ( 1 <<RXEN );//Enable the receiver and transmitter usart interface
  6c:	28 e1       	ldi	r18, 0x18	; 24
  6e:	2a b9       	out	0x0a, r18	; 10
	UBRRH &= ~(1 << URSEL); //Select register address to write on (UBBRH or UCSRC)
  70:	20 b5       	in	r18, 0x20	; 32
  72:	2f 77       	andi	r18, 0x7F	; 127
  74:	20 bd       	out	0x20, r18	; 32
	UBRRH = (unsigned char) (baud >> 8); //Set baud speed (Load MSB bits on UBRR register(bits 11 to 8))
  76:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baud;//Set baud speed (Load and immediate update LSB bits on UBRR register (bits 7 to 0))
  78:	89 b9       	out	0x09, r24	; 9

	UCSRC = ( 1 << URSEL)|( 1 << UPM1) |(3 << UCSZ0); //Select UCSRC register,set Even parity and Data bit length of 8-bits
  7a:	86 ea       	ldi	r24, 0xA6	; 166
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <USART_Transmit>:


void USART_Transmit (unsigned int data)
{
	//Wait until the Transmitter is ready
	while (! (UCSRA & (1 << UDRE)) ){}; //If UDR buffer is empty(HIGH) then you can load UDR
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_Transmit>
	UDR = data;//load UDR transmit buffer
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <USART_Receive>:
}


unsigned char USART_Receive(void){
	unsigned char udrValue;
	while(! (UCSRA & (1 << RXC))) {} 	//Wait until the received data is present
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <USART_Receive>
	udrValue=UDR; //read received data
  8c:	8c b1       	in	r24, 0x0c	; 12
return udrValue;
}
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
	 unsigned char recievedChar='A';
	//Initialize serial communication
	USART_Init(25);
  90:	89 e1       	ldi	r24, 0x19	; 25
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
void USART_Transmit(unsigned int data);
unsigned char USART_Receive(void);

int main(void)
{
	 unsigned char recievedChar='A';
  98:	c1 e4       	ldi	r28, 0x41	; 65
	//Initialize serial communication
	USART_Init(25);
	
	while (1)
	{
		if(recievedChar == 'y'){
  9a:	c9 37       	cpi	r28, 0x79	; 121
  9c:	29 f5       	brne	.+74     	; 0xe8 <main+0x58>
			USART_Transmit('G');
  9e:	87 e4       	ldi	r24, 0x47	; 71
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit('O');
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit('T');
  ae:	84 e5       	ldi	r24, 0x54	; 84
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit(':');
  b6:	8a e3       	ldi	r24, 0x3A	; 58
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit(recievedChar);
  be:	8c 2f       	mov	r24, r28
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit('\n');
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
			USART_Transmit('\r');
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e9       	ldi	r18, 0x9F	; 159
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x56>
  e6:	00 00       	nop
			_delay_ms(500);
		}
		recievedChar=USART_Receive();
  e8:	0e 94 44 00 	call	0x88	; 0x88 <USART_Receive>
  ec:	c8 2f       	mov	r28, r24
	}
  ee:	d5 cf       	rjmp	.-86     	; 0x9a <main+0xa>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
