
code_TIMER_ctc_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b8  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051c  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fb  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setupGPIO>:
}


/** Configuration PORTB as OUTPUT **/
void setupGPIO(){
	DDRD |= (1 << PD5);//Enable OC1A Physical pin as output
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
  72:	08 95       	ret

00000074 <setupTimer>:
}

/**	Configuration TIMER1 (16Bit) in Nomal mode ,  reset done every OCR1A counts **/
void setupTimer(){
	TCCR1A |= (1 << COM1A0); //Activate PIN OC1A (toggle ON/OFF).
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	80 64       	ori	r24, 0x40	; 64
  78:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); //Set Timer1 in CTC Mode with top as OCR1A value.
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	88 60       	ori	r24, 0x08	; 8
  7e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | (1 << CS10) ; //Config frequency prescaler of timer to 1MHZ/64 = 15625Hz
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	83 60       	ori	r24, 0x03	; 3
  84:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625;// Set timer TOP reset threshold to 15625 counts)
  86:	89 e0       	ldi	r24, 0x09	; 9
  88:	9d e3       	ldi	r25, 0x3D	; 61
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
  8e:	08 95       	ret

00000090 <main>:
void setupTimer(void);

/**Example of a 16 Bit timer in CTC mode with no interruption, Blink LED1 based on OC1A frequency = 0,5Hz =2 seconds (1 second ON, 1 second OFF) **/

int main(void){
	setupGPIO();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <setupGPIO>
	setupTimer();
  94:	0e 94 3a 00 	call	0x74	; 0x74 <setupTimer>
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x8>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
