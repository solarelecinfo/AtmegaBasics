
GPIO_interrupt_ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c7  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000536  00000000  00000000  0000077f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022d  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030b  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001257  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setupGpio>:
return 0;
}

/** Configuration PORTC en sortie **/
void setupGpio(){
	DDRB = 0b00001000; //PINB3 PRTB en OUTPUT
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000; 
  70:	18 ba       	out	0x18, r1	; 24
  72:	08 95       	ret

00000074 <setUpGpioInterrupt>:
}

/**	Configuration Interruption GPIO front montant/descendent **/
void setUpGpioInterrupt(){
	DDRD = 0b00000000;//PORTD en INPUT*/ 
  74:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << PIND2); //0bxxxxx1xx Configurer PIN INT0 en PULLUP INPUT 5V
  76:	82 b3       	in	r24, 0x12	; 18
  78:	84 60       	ori	r24, 0x04	; 4
  7a:	82 bb       	out	0x12, r24	; 18
	//Interruption GPIO
	sei();
  7c:	78 94       	sei
	GICR |= (1 << INT0); //Activer interruption sur PIN INTO 
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01) | (1 << ISC00); //Déclencher interruption au front montant 0->5V
  84:	85 b7       	in	r24, 0x35	; 53
  86:	83 60       	ori	r24, 0x03	; 3
  88:	85 bf       	out	0x35, r24	; 53
  8a:	08 95       	ret

0000008c <main>:
void setupGpio(void);
void setUpGpioInterrupt(void);

/** Faire clignoter deux LEDS*/
int main(void){	
	setupGpio();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <setupGpio>
	setUpGpioInterrupt();
  90:	0e 94 3a 00 	call	0x74	; 0x74 <setUpGpioInterrupt>
	while(1){
		asm( "nop" );
  94:	00 00       	nop
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x8>

00000098 <__vector_1>:
	GICR |= (1 << INT0); //Activer interruption sur PIN INTO 
	MCUCR |= (1 << ISC01) | (1 << ISC00); //Déclencher interruption au front montant 0->5V
}

/**Routine d'interruption PIN montant/descendent et raz de flag d'interruption automatique**/
ISR(INT0_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
		PORTB ^= (1<<PINB3);
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	89 27       	eor	r24, r25
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
