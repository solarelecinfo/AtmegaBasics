
Compteur_ex2_ctc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e4  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000245  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000312  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  74:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setupGPIO>:
}


/** Configuration PORTC en sortie **/
void setupGPIO(){
	DDRC |= 0x01;
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  82:	15 ba       	out	0x15, r1	; 21
  84:	08 95       	ret

00000086 <setupTimer>:
}

/**	Configuration TIMER1 (16Bit)=65536 **/
void setupTimer(){
	DDRD |= (1 << PIND5); //PIN OC1A en OUTPUT
  86:	81 b3       	in	r24, 0x11	; 17
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1 << COM1A0); //Sortie PIN OC1A en mode Bascule ON/OFF .   
  8c:	8f b5       	in	r24, 0x2f	; 47
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); //Fixer Mode CTC en interne et le signal de sortie.
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | ( 1<< CS10); //Config prescalaire en 1MHZ/64 = 15625Hz
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15624; //Seuil comptage MAX_TOP=1s=(MAX-1)
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	9d e3       	ldi	r25, 0x3D	; 61
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	
	//SET UP INTERRUPT
	sei();//Autoriser Global interrupt 
  a6:	78 94       	sei
	TIMSK |= (1 << OCIE1A); //Interruption à chaque MAX du CTC et raz flag 
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	89 bf       	out	0x39, r24	; 57
  ae:	08 95       	ret

000000b0 <main>:
unsigned int increment=0;

/**Timer en mode CTC sans interruption, bascule LED1=1s et bascule LED2=2s **/

int main(void){
	setupGPIO();
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <setupGPIO>
	setupTimer();
  b4:	0e 94 43 00 	call	0x86	; 0x86 <setupTimer>
	while(1){
		asm( "nop ");
  b8:	00 00       	nop
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x8>

000000bc <__vector_7>:
	//SET UP INTERRUPT
	sei();//Autoriser Global interrupt 
	TIMSK |= (1 << OCIE1A); //Interruption à chaque MAX du CTC et raz flag 
}

ISR(TIMER1_COMPA_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
	increment = (increment +1) % 3;
  da:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	4f 5f       	subi	r20, 0xFF	; 255
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	9a 01       	movw	r18, r20
  e8:	ab ea       	ldi	r26, 0xAB	; 171
  ea:	ba ea       	ldi	r27, 0xAA	; 170
  ec:	0e 94 9c 00 	call	0x138	; 0x138 <__umulhisi3>
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	9c 01       	movw	r18, r24
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	9a 01       	movw	r18, r20
 100:	28 1b       	sub	r18, r24
 102:	39 0b       	sbc	r19, r25
 104:	c9 01       	movw	r24, r18
 106:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(increment == 0){
 10e:	89 2b       	or	r24, r25
 110:	21 f4       	brne	.+8      	; 0x11a <__vector_7+0x5e>
		PORTC ^= (1<<PORTC0);
 112:	95 b3       	in	r25, 0x15	; 21
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	89 27       	eor	r24, r25
 118:	85 bb       	out	0x15, r24	; 21
		}
}
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	7f 91       	pop	r23
 124:	6f 91       	pop	r22
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__umulhisi3>:
 138:	a2 9f       	mul	r26, r18
 13a:	b0 01       	movw	r22, r0
 13c:	b3 9f       	mul	r27, r19
 13e:	c0 01       	movw	r24, r0
 140:	a3 9f       	mul	r26, r19
 142:	70 0d       	add	r23, r0
 144:	81 1d       	adc	r24, r1
 146:	11 24       	eor	r1, r1
 148:	91 1d       	adc	r25, r1
 14a:	b2 9f       	mul	r27, r18
 14c:	70 0d       	add	r23, r0
 14e:	81 1d       	adc	r24, r1
 150:	11 24       	eor	r1, r1
 152:	91 1d       	adc	r25, r1
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
