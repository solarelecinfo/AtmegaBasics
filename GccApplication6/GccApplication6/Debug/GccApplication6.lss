
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c6  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:
/* example, 2400bauds=25                                                                    */
/************************************************************************/
void USART_Init (unsigned int baud)
{
	//Expliciter l'utilisation du registre UBBRH avant operation d'écriture sur UBBRH
	UBRRH &= ~(1 << URSEL);
  82:	20 b5       	in	r18, 0x20	; 32
  84:	2f 77       	andi	r18, 0x7F	; 127
  86:	20 bd       	out	0x20, r18	; 32
	//Partie MSB du registre HAUT (bits 8 to 11)
	UBRRH = (unsigned char) (baud >> 8);
  88:	90 bd       	out	0x20, r25	; 32
	//Partie LSB du registre BAS (bits 0 à 7)
	UBRRL = (unsigned char) baud;
  8a:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
	
	//Expliciter l'utilisation du registre UCSRC avant operation d'écriture sur UBBRH
	UCSRC  = (1 << URSEL) ;
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	80 bd       	out	0x20, r24	; 32
	//Set 1 stop bits and data bit length is 8-bit
	UCSRC |= (3 << UCSZ0);
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 bd       	out	0x20, r24	; 32
	//Set parity =Even
	UCSRC |= (1<< UPM1);
  9a:	80 b5       	in	r24, 0x20	; 32
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	08 95       	ret

000000a2 <USART_Transmit>:


void USART_Transmit (char data)
{
	//Wait until the Transmitter is ready
	while (! (UCSRA & (1 << UDRE)) );
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <USART_Transmit>

	//Set the TXB8 bit to 1
	//UCSRB |= (1 << TXB8);

	//Get that data outa here!
	UDR = data;
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <main>:
void USART_Transmit(char data);

int main(void)
{
    // initialiser la communication serial
	USART_Init(6);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
    while (1) 
    {
		USART_Transmit("a");
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e3       	ldi	r18, 0x3F	; 63
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x20>
  ca:	00 00       	nop
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x8>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
