
usart_basic_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000733  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
Description:Initialize configuration register for USART interface in asynchronous mode
baud:Integer value for speed baud(bits/s) in UBBR ,example: 2400bauds=25                                                                    
/*************************************************************************************/
void USART_Init (unsigned int baud)
{
	UCSRB = (1 << TXEN);//Enable the receiver usart interface
  6c:	28 e0       	ldi	r18, 0x08	; 8
  6e:	2a b9       	out	0x0a, r18	; 10
	UBRRH &= ~(1 << URSEL); //Select register address to write on (UBBRH or UCSRC)
  70:	20 b5       	in	r18, 0x20	; 32
  72:	2f 77       	andi	r18, 0x7F	; 127
  74:	20 bd       	out	0x20, r18	; 32
	UBRRH = (unsigned char) (baud >> 8); //Set baud speed (Load MSB bits on UBRR register(bits 11 to 8))
  76:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baud;//Set baud speed (Load and immediate update LSB bits on UBRR register (bits 7 to 0))
  78:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = ( 1 << URSEL)|( 1 << UPM1) |(3 << UCSZ0); //Select UCSRC register,set Even parity and Data bit length of 8-bits
  7a:	86 ea       	ldi	r24, 0xA6	; 166
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <USART_Transmit>:


void USART_Transmit (unsigned int data)
{
//Wait until the Transmitter is ready
	while (! (UCSRA & (1 << UDRE)) ){}; //If UDR buffer is empty(HIGH) then you can load UDR
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_Transmit>
	UDR = data;//load UDR transmit buffer 
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
	unsigned int counter = 0;
	//Initialize serial communication
	USART_Init(25);
  88:	89 e1       	ldi	r24, 0x19	; 25
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
void USART_Init(unsigned int);
void USART_Transmit(unsigned int data);

int main(void)
{
	unsigned int counter = 0;
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x12>
		USART_Transmit('\n');
		USART_Transmit('\r');
		_delay_ms(500);
		counter += 1;
		if( counter >= 11){
			counter = 0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned int counter = 0;
	//Initialize serial communication
	USART_Init(25);
	while (1)
	{
		USART_Transmit('V');
  9a:	86 e5       	ldi	r24, 0x56	; 86
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('A');
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  aa:	8c e4       	ldi	r24, 0x4C	; 76
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('U');
  b2:	85 e5       	ldi	r24, 0x55	; 85
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('E');
  ba:	85 e4       	ldi	r24, 0x45	; 69
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('0'+counter);
  c2:	ce 01       	movw	r24, r28
  c4:	c0 96       	adiw	r24, 0x30	; 48
  c6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\n');
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\r');
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f e9       	ldi	r18, 0x9F	; 159
  dc:	86 e8       	ldi	r24, 0x86	; 134
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x58>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x62>
  ea:	00 00       	nop
		_delay_ms(500);
		counter += 1;
  ec:	21 96       	adiw	r28, 0x01	; 1
		if( counter >= 11){
  ee:	cb 30       	cpi	r28, 0x0B	; 11
  f0:	d1 05       	cpc	r29, r1
  f2:	88 f6       	brcc	.-94     	; 0x96 <main+0xe>
  f4:	d2 cf       	rjmp	.-92     	; 0x9a <main+0x12>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
