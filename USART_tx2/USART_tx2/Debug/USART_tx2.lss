
USART_tx2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ae  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000238  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
	int nb_elem  = sizeof args / sizeof (char);
	for ( int index = 0 ; index < nb_elem ; index++){
		USART_Transmit(args[index]);
	}

}
  92:	20 b5       	in	r18, 0x20	; 32
  94:	2f 77       	andi	r18, 0x7F	; 127
  96:	20 bd       	out	0x20, r18	; 32
  98:	90 bd       	out	0x20, r25	; 32
  9a:	89 b9       	out	0x09, r24	; 9
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	86 ea       	ldi	r24, 0xA6	; 166
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <USART_Transmit>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <USART_Receive>:
Description: method utilisé pour bloquer le thread appelant jusqu'au reception de quelque chose
sur le pin RX
**/
unsigned char USART_Receive(void){
	unsigned char RECEIVE_UDR='N';
	if(UCSRA & (1 << RXC)) {
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <USART_Receive+0x8>
		RECEIVE_UDR=UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
  b4:	08 95       	ret
	}else{
		RECEIVE_UDR='N';
  b6:	8e e4       	ldi	r24, 0x4E	; 78
	}
	return RECEIVE_UDR;
}
  b8:	08 95       	ret

000000ba <TIMER0_Init>:


void TIMER0_Init(){
	//PORTC CONFIGURATION SPECIAL PINB3 en sortie OC0(signal du compteur) 
	DDRC =0x01; /* 0b00000001//PINC0 as OUTPUT*/
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000; /*initial state of pins as output*/
  be:	15 ba       	out	0x15, r1	; 21
	asm( "nop ");
  c0:	00 00       	nop
	
		//TIMER CONFIGURATION
	TCCR0 |= (1<<WGM01); //configurer le mode du timer en CTC valeur max du compteur customisable 
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM00); //configurer le pin OC0 de seuil de comptage en mode TOGGLE ? chaque MAX_TOP
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS02)|(1<<CS00); //configurer prescalaire du 8 bit compteur0 en 1MHZ/1024
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	85 60       	ori	r24, 0x05	; 5
  d2:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 244;//MAX_TOP customisable counter value
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	8c bf       	out	0x3c, r24	; 60
	
	//INTERRUPT
	sei();
  d8:	78 94       	sei
	TIMSK |= (1<<OCIE0);
  da:	89 b7       	in	r24, 0x39	; 57
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	89 bf       	out	0x39, r24	; 57
	TIFR |= (1<<OCF0);
  e0:	88 b7       	in	r24, 0x38	; 56
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	88 bf       	out	0x38, r24	; 56
  e6:	08 95       	ret

000000e8 <main>:

int main(void)
{
unsigned int counter=0;
    // initialiser la communication serial
	USART_Init(25);
  e8:	89 e1       	ldi	r24, 0x19	; 25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	//unsigned char recieved_char='A';
	//Enable compteur TIMER0 interrupt et configuration du comptage ? 1MHZ
	TIMER0_Init();
  f0:	0e 94 5d 00 	call	0xba	; 0xba <TIMER0_Init>
void USART_Transmit(unsigned int data);
unsigned char USART_Receive(void);

int main(void)
{
unsigned int counter=0;
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <main+0x16>
		USART_Transmit('\n');
		USART_Transmit('\r');
		_delay_ms(500);
		counter+=1;
		if(counter>=10){
			counter=0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
	//Enable compteur TIMER0 interrupt et configuration du comptage ? 1MHZ
	TIMER0_Init();
	
    while (1) 
    {
		USART_Transmit('H');
  fe:	88 e4       	ldi	r24, 0x48	; 72
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('E');
 106:	85 e4       	ldi	r24, 0x45	; 69
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('L');
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('L');
 116:	8c e4       	ldi	r24, 0x4C	; 76
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('A');
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit(recieved_char);
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('\n');
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		USART_Transmit('\r');
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f e9       	ldi	r18, 0x9F	; 159
 142:	86 e8       	ldi	r24, 0x86	; 134
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x5e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x68>
 150:	00 00       	nop
		_delay_ms(500);
		counter+=1;
 152:	21 96       	adiw	r28, 0x01	; 1
		if(counter>=10){
 154:	ca 30       	cpi	r28, 0x0A	; 10
 156:	d1 05       	cpc	r29, r1
 158:	80 f6       	brcc	.-96     	; 0xfa <main+0x12>
 15a:	d1 cf       	rjmp	.-94     	; 0xfe <main+0x16>

0000015c <__vector_10>:
	sei();
	TIMSK |= (1<<OCIE0);
	TIFR |= (1<<OCF0);
}

ISR(TIMER0_COMP_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	increment++;
 17e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 182:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 18c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if(increment >4){
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 194:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 198:	05 97       	sbiw	r24, 0x05	; 5
 19a:	60 f0       	brcs	.+24     	; 0x1b4 <__vector_10+0x58>
		PORTC ^= (1<<PORTC0);
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
 1a2:	85 bb       	out	0x15, r24	; 21
		increment = 0;
 1a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 1a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		recieved_char=USART_Receive();
 1ac:	0e 94 57 00 	call	0xae	; 0xae <USART_Receive>
 1b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}else{
	
	}

 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
