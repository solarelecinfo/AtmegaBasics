
GPIO_OUTPUT_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000613  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setup>:
/**
Description : initialisation des registres GPIO en sortie et en entrée
**/
void setup(){
	// Initialisation de l'entrée
	DDRC &= ~(1 << PINC7); // Configurer PINC7 comme entrée
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8f 77       	andi	r24, 0x7F	; 127
  70:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b10000000; // Configurer l'entrée PINC7 en mode PULL-UP (5V sont mis en sortie lorsqu'elle est inactive)
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	85 bb       	out	0x15, r24	; 21
		
	// Initialisation de la sortie
	DDRB |= (1 << PINB1) | (1 << PINB0);// Configurer PINB2 et PINB3 comme sorties
  76:	87 b3       	in	r24, 0x17	; 23
  78:	83 60       	ori	r24, 0x03	; 3
  7a:	87 bb       	out	0x17, r24	; 23
	PORTB &= 0b00000000; // Forcer l'état initial du port à zéro
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	18 ba       	out	0x18, r1	; 24
  80:	08 95       	ret

00000082 <main>:
Le programme implémente le bouton PC7, permettant de générer un nombre aléatoire de transitions LED ON/OFF.
**/
void setup();

int main(void){
	setup();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <setup>
	while(1) {
		if(!(PINC & (1 << PINC7))) { //Vérifier si le bouton a été appuyé ,c.à.d PINC7==0
  86:	9f 99       	sbic	0x13, 7	; 19
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x4>
			PORTB ^= (1 << PINB1) | (1 <<PINB0);   // 0b000001100 XOR PORTB pour clignoter les sorties
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	89 27       	eor	r24, r25
  90:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f eb       	ldi	r18, 0xBF	; 191
  94:	84 ed       	ldi	r24, 0xD4	; 212
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x20>
  a2:	00 00       	nop
  a4:	f0 cf       	rjmp	.-32     	; 0x86 <main+0x4>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
