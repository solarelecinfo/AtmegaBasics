
usart_basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000733  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
/* example, 2400bauds=25                                                                    */
/************************************************************************/
void USART_Init (unsigned int baud)
{
	//Expliciter l'utilisation du registre UBBRH avant operation d'?criture sur UBBRH
	UBRRH &= ~(1 << URSEL);
  6c:	20 b5       	in	r18, 0x20	; 32
  6e:	2f 77       	andi	r18, 0x7F	; 127
  70:	20 bd       	out	0x20, r18	; 32
	//Partie MSB du registre HAUT (bits 8 to 11)
	UBRRH = (unsigned char) (baud >> 8);
  72:	90 bd       	out	0x20, r25	; 32
	//Partie LSB du registre BAS (bits 0 ? 7)
	UBRRL = (unsigned char) baud;
  74:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	8a b9       	out	0x0a, r24	; 10

	//Expliciter l'utilisation du registre UCSRC avant operation d'?criture sur UBBRH
	//Set enable EVEN PARITY
	//Set 1 stop bits and data bit length is 8-bit
	UCSRC = (1<<URSEL)| (1<<UPM1)|(3 << UCSZ0);
  7a:	86 ea       	ldi	r24, 0xA6	; 166
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <USART_Transmit>:


void USART_Transmit (unsigned int data)
{
	//Wait until the Transmitter is ready
	while (! (UCSRA & (1 << UDRE)) );
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_Transmit>
	//Get that data outa here!
	UDR = data;
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
unsigned int counter=0;
    // initialiser la communication serial
	USART_Init(25);
  88:	89 e1       	ldi	r24, 0x19	; 25
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
void USART_Init(unsigned int);
void USART_Transmit(unsigned int data);

int main(void)
{
unsigned int counter=0;
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x12>
		USART_Transmit('\n');
		USART_Transmit('\r');
		_delay_ms(500);
		counter+=1;
		if(counter>=250){
			counter=0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int counter=0;
    // initialiser la communication serial
	USART_Init(25);
    while (1) 
    {
		USART_Transmit('H');
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('E');
  a2:	85 e4       	ldi	r24, 0x45	; 69
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  aa:	8c e4       	ldi	r24, 0x4C	; 76
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('L');
  b2:	8c e4       	ldi	r24, 0x4C	; 76
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('A');
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit(counter);
  c2:	ce 01       	movw	r24, r28
  c4:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\n');
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
		USART_Transmit('\r');
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e9       	ldi	r18, 0x9F	; 159
  da:	86 e8       	ldi	r24, 0x86	; 134
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x56>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x60>
  e8:	00 00       	nop
		_delay_ms(500);
		counter+=1;
  ea:	21 96       	adiw	r28, 0x01	; 1
		if(counter>=250){
  ec:	ca 3f       	cpi	r28, 0xFA	; 250
  ee:	d1 05       	cpc	r29, r1
  f0:	90 f6       	brcc	.-92     	; 0x96 <main+0xe>
  f2:	d3 cf       	rjmp	.-90     	; 0x9a <main+0x12>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
