
USART_txt6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000806  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063c  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000202  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  8a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
int nb_elem  = sizeof args / sizeof (char);
for ( int index = 0 ; index < nb_elem ; index++){
USART_Transmit(args[index]);
}

}
  92:	20 b5       	in	r18, 0x20	; 32
  94:	2f 77       	andi	r18, 0x7F	; 127
  96:	20 bd       	out	0x20, r18	; 32
  98:	90 bd       	out	0x20, r25	; 32
  9a:	89 b9       	out	0x09, r24	; 9
  9c:	86 ea       	ldi	r24, 0xA6	; 166
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <USART_Transmit>:
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	93 ec       	ldi	r25, 0xC3	; 195
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <USART_Transmit+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <USART_Transmit+0x10>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <main>:
  c2:	89 e1       	ldi	r24, 0x19	; 25
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x16>
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	88 e4       	ldi	r24, 0x48	; 72
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  e0:	85 e4       	ldi	r24, 0x45	; 69
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  e8:	8c e4       	ldi	r24, 0x4C	; 76
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  f0:	8c e4       	ldi	r24, 0x4C	; 76
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  f8:	8f e4       	ldi	r24, 0x4F	; 79
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 100:	fe 01       	movw	r30, r28
 102:	ee 59       	subi	r30, 0x9E	; 158
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	83 70       	andi	r24, 0x03	; 3
 128:	90 78       	andi	r25, 0x80	; 128
 12a:	99 23       	and	r25, r25
 12c:	24 f4       	brge	.+8      	; 0x136 <main+0x74>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	8c 6f       	ori	r24, 0xFC	; 252
 132:	9f 6f       	ori	r25, 0xFF	; 255
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	ec 01       	movw	r28, r24
 138:	0a 30       	cpi	r16, 0x0A	; 10
 13a:	11 05       	cpc	r17, r1
 13c:	58 f6       	brcc	.-106    	; 0xd4 <main+0x12>
 13e:	cc cf       	rjmp	.-104    	; 0xd8 <main+0x16>

00000140 <__vector_13>:


/**
Interruption lors de la reception d'un caractère a été receptionée par l'interface serial
**/
ISR(USART_RXC_vect) {
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
// Cette ISR est appelée lorsqu'un octet est reçu en provenande du clavier PC
recieved_char_table[global_index] = UDR;
 152:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	8c b1       	in	r24, 0x0c	; 12
 15c:	ee 59       	subi	r30, 0x9E	; 158
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 83       	st	Z, r24
global_index = ((global_index + 1) % 4);
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	83 70       	andi	r24, 0x03	; 3
 16e:	90 78       	andi	r25, 0x80	; 128
 170:	99 23       	and	r25, r25
 172:	24 f4       	brge	.+8      	; 0x17c <__vector_13+0x3c>
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	8c 6f       	ori	r24, 0xFC	; 252
 178:	9f 6f       	ori	r25, 0xFF	; 255
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
// Traitez l'octet reçu (stockez-le, envoyez-le sur une interface de communication, etc.)

}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
