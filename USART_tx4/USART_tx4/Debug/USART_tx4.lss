
USART_tx4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000806  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063c  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000202  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
	int nb_elem  = sizeof args / sizeof (char);
	for ( int index = 0 ; index < nb_elem ; index++){
		USART_Transmit(args[index]);
	}

}
  92:	20 b5       	in	r18, 0x20	; 32
  94:	2f 77       	andi	r18, 0x7F	; 127
  96:	20 bd       	out	0x20, r18	; 32
  98:	90 bd       	out	0x20, r25	; 32
  9a:	89 b9       	out	0x09, r24	; 9
  9c:	86 ea       	ldi	r24, 0xA6	; 166
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <USART_Transmit>:
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	2f e9       	ldi	r18, 0x9F	; 159
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <USART_Transmit+0xc>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <USART_Transmit+0x16>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <main>:
  c8:	89 e1       	ldi	r24, 0x19	; 25
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x16>
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
  de:	88 e4       	ldi	r24, 0x48	; 72
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  e6:	85 e4       	ldi	r24, 0x45	; 69
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  ee:	8c e4       	ldi	r24, 0x4C	; 76
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  f6:	8c e4       	ldi	r24, 0x4C	; 76
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 106:	fe 01       	movw	r30, r28
 108:	ee 59       	subi	r30, 0x9E	; 158
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
 124:	0f 5f       	subi	r16, 0xFF	; 255
 126:	1f 4f       	sbci	r17, 0xFF	; 255
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	83 70       	andi	r24, 0x03	; 3
 12e:	90 78       	andi	r25, 0x80	; 128
 130:	99 23       	and	r25, r25
 132:	24 f4       	brge	.+8      	; 0x13c <main+0x74>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	8c 6f       	ori	r24, 0xFC	; 252
 138:	9f 6f       	ori	r25, 0xFF	; 255
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	ec 01       	movw	r28, r24
 13e:	0a 30       	cpi	r16, 0x0A	; 10
 140:	11 05       	cpc	r17, r1
 142:	58 f6       	brcc	.-106    	; 0xda <main+0x12>
 144:	cc cf       	rjmp	.-104    	; 0xde <main+0x16>

00000146 <__vector_13>:


/**
Interruption lors de la reception d'un caractère a été receptionée par l'interface serial 
**/
ISR(USART_RXC_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
    // Cette ISR est appelée lorsqu'un octet est reçu
    recieved_char_table[global_index] = UDR;
 158:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 160:	8c b1       	in	r24, 0x0c	; 12
 162:	ee 59       	subi	r30, 0x9E	; 158
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	80 83       	st	Z, r24
	global_index = ((global_index + 1) % 4);
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	83 70       	andi	r24, 0x03	; 3
 174:	90 78       	andi	r25, 0x80	; 128
 176:	99 23       	and	r25, r25
 178:	24 f4       	brge	.+8      	; 0x182 <__vector_13+0x3c>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	8c 6f       	ori	r24, 0xFC	; 252
 17e:	9f 6f       	ori	r25, 0xFF	; 255
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    // Traitez l'octet reçu (stockez-le, envoyez-le sur une interface de communication, etc.)
	
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
