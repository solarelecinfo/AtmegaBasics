
Compteur_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b8  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051c  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020d  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fc  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setupGPIO>:
}


/** Configuration PORTC en sortie **/
void setupGPIO(){
	DDRB |= 0x01;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  72:	18 ba       	out	0x18, r1	; 24
  74:	08 95       	ret

00000076 <setupTimer>:
}

/**	Configuration TIMER1 (16Bit)=65536 **/
void setupTimer(){
	//DDRD |= (1 << PIND5); //PIN OC1A en OUTPUT
	TCCR1A |= (1 << COM1A0); //Sortie PIN OC1A en mode Bascule ON/OFF .   
  76:	8f b5       	in	r24, 0x2f	; 47
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); //Fixer Mode CTC en interne et le signal de sortie.
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | ( 1<< CS10); //Config prescalaire en 1MHZ/64 = 15625Hz
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	83 60       	ori	r24, 0x03	; 3
  86:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31250; //Seuil comptage MAX_TOP=2s=2x(MAX-1)
  88:	82 e1       	ldi	r24, 0x12	; 18
  8a:	9a e7       	ldi	r25, 0x7A	; 122
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
  90:	08 95       	ret

00000092 <main>:
void setupTimer(void);

/**Timer en mode CTC sans interruption, bascule LED1=1s et bascule LED2=2s **/

int main(void){
	setupGPIO();
  92:	0e 94 36 00 	call	0x6c	; 0x6c <setupGPIO>
	setupTimer();
  96:	0e 94 3b 00 	call	0x76	; 0x76 <setupTimer>
	while(1){
		if ( !(TCNT1 % 7810) ){
  9a:	8c b5       	in	r24, 0x2c	; 44
  9c:	9d b5       	in	r25, 0x2d	; 45
  9e:	62 e8       	ldi	r22, 0x82	; 130
  a0:	7e e1       	ldi	r23, 0x1E	; 30
  a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <__udivmodhi4>
  a6:	89 2b       	or	r24, r25
  a8:	c1 f7       	brne	.-16     	; 0x9a <main+0x8>
			PORTB ^= 0x01; //LED ON
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 27       	eor	r24, r25
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x8>

000000b4 <__udivmodhi4>:
  b4:	aa 1b       	sub	r26, r26
  b6:	bb 1b       	sub	r27, r27
  b8:	51 e1       	ldi	r21, 0x11	; 17
  ba:	07 c0       	rjmp	.+14     	; 0xca <__udivmodhi4_ep>

000000bc <__udivmodhi4_loop>:
  bc:	aa 1f       	adc	r26, r26
  be:	bb 1f       	adc	r27, r27
  c0:	a6 17       	cp	r26, r22
  c2:	b7 07       	cpc	r27, r23
  c4:	10 f0       	brcs	.+4      	; 0xca <__udivmodhi4_ep>
  c6:	a6 1b       	sub	r26, r22
  c8:	b7 0b       	sbc	r27, r23

000000ca <__udivmodhi4_ep>:
  ca:	88 1f       	adc	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	5a 95       	dec	r21
  d0:	a9 f7       	brne	.-22     	; 0xbc <__udivmodhi4_loop>
  d2:	80 95       	com	r24
  d4:	90 95       	com	r25
  d6:	bc 01       	movw	r22, r24
  d8:	cd 01       	movw	r24, r26
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
